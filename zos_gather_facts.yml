---
- name: Gather z/OS-specific facts.
  hosts: zos_host
  gather_facts: false
  environment: "{{ environment_vars }}"
  tasks:
    - name: Gather all facts about z/OS host.
      ibm.ibm_zos_core.zos_gather_facts:

    - name: Print gathered facts about the master catalog.
      ansible.builtin.debug:
        msg:
          - "master catalog dsn: {{ ansible_facts.master_catalog_dsn }}"
          - "master catalog volser: {{ ansible_facts.master_catalog_volser }}"

    - name: Print only CPC and IODF info from gathered z/OS facts.
      ansible.builtin.debug:
        msg:
          - "manufacturer: {{ cpc_nd_manufacturer }}"
          - "model: {{ cpc_nd_model }}"
          - "plant: {{ cpc_nd_plant }}"
          - "iodf name: {{ iodf_name }}"
          - "iodf config: {{ iodf_config }}"

    - name: Print out all gathered facts about the z/OS host.
      ansible.builtin.debug:
        var: ansible_facts

    - name: Create temp file for raw output
      ansible.builtin.tempfile:
        state: file
        suffix: .txt
      register: temp_output_file
      delegate_to: localhost

    - name: Create formatted facts file
      ansible.builtin.tempfile:
        state: file
        suffix: .txt
      register: formatted_output_file
      delegate_to: localhost

    - name: Copy raw facts to temp file
      ansible.builtin.copy:
        content: "{{ ansible_facts | to_nice_json }}"
        dest: "{{ temp_output_file.path }}"
      delegate_to: localhost

    - name: Check if Python script exists
      ansible.builtin.stat:
        path: /var/tmp/parse_ansible_output.py
      register: script_check
      delegate_to: localhost

    - name: Display script existence
      ansible.builtin.debug:
        msg: "Python script exists: {{ script_check.stat.exists }}"
      delegate_to: localhost

    - name: Set Python script permissions
      ansible.builtin.file:
        path: /var/tmp/parse_ansible_output.py
        mode: '0755'
      when: script_check.stat.exists
      delegate_to: localhost

    - name: Run Python parser to format output
      ansible.builtin.shell: >
        python3 /var/tmp/parse_ansible_output.py "{{ temp_output_file.path }}" "{{ formatted_output_file.path }}"
      args:
        executable: /bin/bash
      delegate_to: localhost
      register: parser_output
      when: script_check.stat.exists

    - name: Display parser output if command failed
      ansible.builtin.debug:
        var: parser_output
      when: script_check.stat.exists and parser_output.rc != 0
      delegate_to: localhost
      
    - name: Display formatted output
      ansible.builtin.debug:
        msg: "{{ lookup('file', formatted_output_file.path) | from_json }}"
      delegate_to: localhost
      when: script_check.stat.exists and parser_output.rc == 0

    - name: Format output manually if script failed
      ansible.builtin.set_fact:
        formatted_facts:
          System_Info:
            Product_Name: "{{ ansible_facts.product_name }}"
            Product_Version: "{{ ansible_facts.product_version }}.{{ ansible_facts.product_release }}.{{ ansible_facts.product_mod_level }}"
            System_Name: "{{ ansible_facts.sys_name }}"
            SMF_Name: "{{ ansible_facts.smf_name }}"
          Catalog_Info:
            Master_Catalog_DSN: "{{ ansible_facts.master_catalog_dsn }}"
            Master_Catalog_VOLSER: "{{ ansible_facts.master_catalog_volser }}"
          Hardware_Info:
            Manufacturer: "{{ ansible_facts.cpc_nd_manufacturer }}"
            Model: "{{ ansible_facts.cpc_nd_model }}"
            Plant: "{{ ansible_facts.cpc_nd_plant }}"
            IODF_Name: "{{ ansible_facts.iodf_name }}"
            IODF_Config: "{{ ansible_facts.iodf_config }}"
      when: not script_check.stat.exists or parser_output.rc != 0
      delegate_to: localhost

    - name: Display manually formatted output if script failed
      ansible.builtin.debug:
        var: formatted_facts
      when: not script_check.stat.exists or parser_output.rc != 0
      delegate_to: localhost

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ temp_output_file.path }}"
        - "{{ formatted_output_file.path }}"
      delegate_to: localhost